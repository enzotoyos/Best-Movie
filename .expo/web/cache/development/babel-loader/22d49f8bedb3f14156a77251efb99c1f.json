{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Utilisateurs\\\\Armand\\\\Documents\\\\Ynov\\\\WebMobilePWA\\\\Best-Movie\\\\src\\\\screens\\\\Home.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport firebase from \"firebase\";\nimport { Layout, Button, Text, TopNav, Section, SectionContent, useTheme, themeColor } from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Swiper from \"react-native-deck-swiper\";\nimport { discoveryFilms } from \"../API/index\";\nimport { pushFilmsOnFirestore } from \"../screens/utils/pushFilmsFirestore\";\nexport default function (_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n  var idCard;\n  var posterPath;\n  var title;\n\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode,\n      setTheme = _useTheme.setTheme;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      movieList = _useState2[0],\n      setMovieList = _useState2[1];\n\n  useEffect(function () {\n    getDataMovie();\n  }, []);\n\n  var getDataMovie = function getDataMovie() {\n    var result;\n    return _regeneratorRuntime.async(function getDataMovie$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(discoveryFilms());\n\n          case 2:\n            result = _context.sent;\n            setMovieList(result.results);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setLoading = function setLoading(isLoad) {\n    if (!isLoad) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 14\n        }\n      }, \"Loading\");\n    }\n  };\n\n  var onSwipeRight = function onSwipeRight(cardID, posterURL, movieTitle) {\n    var currentUser;\n    return _regeneratorRuntime.async(function onSwipeRight$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            currentUser = firebase.auth().currentUser;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(pushFilmsOnFirestore(currentUser.uid, true, cardID, posterURL, movieTitle));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onSwipeLeft = function onSwipeLeft(cardID, posterURL, movieTitle) {\n    var currentUser;\n    return _regeneratorRuntime.async(function onSwipeLeft$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            currentUser = firebase.auth().currentUser;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(pushFilmsOnFirestore(currentUser.uid, false, cardID, posterURL, movieTitle));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"bold\",\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Cr\\xE9er votre propre collection\"), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      marginBottom: 60,\n      backgroundColor: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, React.createElement(Swiper, {\n    cards: movieList,\n    renderCard: function renderCard(card) {\n      if (!card) {\n        return React.createElement(View, {\n          style: styles.loading,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 24\n          }\n        }, setLoading(true));\n      } else {\n        idCard = card.id;\n        posterPath = card.poster_path;\n        title = card.original_title;\n        return React.createElement(View, {\n          style: styles.card,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }\n        }, React.createElement(Text, {\n          style: styles.originalTtile,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, card.original_title), React.createElement(Image, {\n          style: styles.image,\n          source: {\n            uri: \"https://image.tmdb.org/t/p/w500\" + card.poster_path\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }\n        }));\n      }\n    },\n    onSwiped: function onSwiped(movieList) {\n      console.log(movieList);\n    },\n    onSwipedAll: function onSwipedAll() {\n      console.log(\"onSwipedAll\");\n    },\n    onSwipedLeft: function onSwipedLeft() {\n      return onSwipeLeft(idCard, posterPath, title);\n    },\n    onSwipedRight: function onSwipedRight() {\n      return onSwipeRight(idCard, posterPath, title);\n    },\n    cardIndex: 0,\n    backgroundColor: \"transparent\",\n    stackSize: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"transparent\"\n  },\n  card: {\n    flex: 1,\n    borderRadius: 20,\n    borderWidth: 2,\n    backgroundColor: \"transparent\",\n    borderColor: \"transparent\",\n    justifyContent: \"center\",\n    marginBottom: \"50%\"\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 50,\n    backgroundColor: \"transparent\"\n  },\n  image: {\n    borderRadius: 18,\n    width: \"100%\",\n    height: \"100%\"\n  },\n  title: {\n    marginTop: \"5%\",\n    textAlign: \"center\",\n    fontSize: 20\n  },\n  originalTtile: {\n    textAlign: \"center\",\n    marginBottom: \"1%\"\n  }\n});","map":{"version":3,"sources":["D:/Utilisateurs/Armand/Documents/Ynov/WebMobilePWA/Best-Movie/src/screens/Home.js"],"names":["React","useEffect","useState","firebase","Layout","Button","Text","TopNav","Section","SectionContent","useTheme","themeColor","Ionicons","Swiper","discoveryFilms","pushFilmsOnFirestore","navigation","idCard","posterPath","title","isDarkmode","setTheme","movieList","setMovieList","getDataMovie","result","results","setLoading","isLoad","onSwipeRight","cardID","posterURL","movieTitle","currentUser","auth","uid","onSwipeLeft","styles","container","flex","alignItems","marginBottom","backgroundColor","card","loading","id","poster_path","original_title","originalTtile","image","uri","console","log","StyleSheet","create","borderRadius","borderWidth","borderColor","justifyContent","text","textAlign","fontSize","width","height","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;AAUA,OAAOC,QAAP,MAAqB,UAArB;AACA,SACEC,MADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,OALF,EAMEC,cANF,EAOEC,QAPF,EAQEC,UARF,QASO,sBATP;AAUA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,cAAT;AACA,SAASC,oBAAT;AAEA,eAAe,gBAA0B;AAAA;;AAAA,MAAdC,UAAc,QAAdA,UAAc;AACvC,MAAIC,MAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,KAAJ;;AACA,kBAAiCT,QAAQ,EAAzC;AAAA,MAAQU,UAAR,aAAQA,UAAR;AAAA,MAAoBC,QAApB,aAAoBA,QAApB;;AACA,kBAAkCnB,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOoB,SAAP;AAAA,MAAkBC,YAAlB;;AAEAtB,EAAAA,SAAS,CAAC,YAAM;AACduB,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEV,cAAc,EADhB;;AAAA;AACbW,YAAAA,MADa;AAEnBF,YAAAA,YAAY,CAACE,MAAM,CAACC,OAAR,CAAZ;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAKA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7B,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD;AACF,GAJD;;AAMA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,MAAP,EAAeC,SAAf,EAA0BC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,WADa,GACC9B,QAAQ,CAAC+B,IAAT,GAAgBD,WADjB;AAAA;AAAA,6CAEblB,oBAAoB,CACxBkB,WAAW,CAACE,GADY,EAExB,IAFwB,EAGxBL,MAHwB,EAIxBC,SAJwB,EAKxBC,UALwB,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAWA,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAAON,MAAP,EAAeC,SAAf,EAA0BC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,WADY,GACE9B,QAAQ,CAAC+B,IAAT,GAAgBD,WADlB;AAAA;AAAA,6CAEZlB,oBAAoB,CACxBkB,WAAW,CAACE,GADY,EAExB,KAFwB,EAGxBL,MAHwB,EAIxBC,SAJwB,EAKxBC,UALwB,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAWA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,KAAK,EAAEK,MAAM,CAAClB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEkB,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,YAAY,EAAE,EAHT;AAILC,MAAAA,eAAe,EAAE;AAJZ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAEpB,SADT;AAEE,IAAA,UAAU,EAAE,oBAACqB,IAAD,EAAU;AACpB,UAAI,CAACA,IAAL,EAAW;AACT,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACO,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8BjB,UAAU,CAAC,IAAD,CAAxC,CAAP;AACD,OAFD,MAEO;AACLV,QAAAA,MAAM,GAAG0B,IAAI,CAACE,EAAd;AACA3B,QAAAA,UAAU,GAAGyB,IAAI,CAACG,WAAlB;AACA3B,QAAAA,KAAK,GAAGwB,IAAI,CAACI,cAAb;AACA,eACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEV,MAAM,CAACM,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACW,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGL,IAAI,CAACI,cADR,CADF,EAIE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAEV,MAAM,CAACY,KADhB;AAEE,UAAA,MAAM,EAAE;AACNC,YAAAA,GAAG,EACD,oCAAoCP,IAAI,CAACG;AAFrC,WAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF;AAcD;AACF,KAxBH;AAyBE,IAAA,QAAQ,EAAE,kBAACxB,SAAD,EAAe;AACvB6B,MAAAA,OAAO,CAACC,GAAR,CAAY9B,SAAZ;AACD,KA3BH;AA4BE,IAAA,WAAW,EAAE,uBAAM;AACjB6B,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KA9BH;AA+BE,IAAA,YAAY,EAAE;AAAA,aAAMhB,WAAW,CAACnB,MAAD,EAASC,UAAT,EAAqBC,KAArB,CAAjB;AAAA,KA/BhB;AAgCE,IAAA,aAAa,EAAE;AAAA,aAAMU,YAAY,CAACZ,MAAD,EAASC,UAAT,EAAqBC,KAArB,CAAlB;AAAA,KAhCjB;AAiCE,IAAA,SAAS,EAAE,CAjCb;AAkCE,IAAA,eAAe,EAAE,aAlCnB;AAmCE,IAAA,SAAS,EAAE,CAnCb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CAJF,CADF;AAuDD;AACD,IAAMkB,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;AAC/BhB,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETG,IAAAA,eAAe,EAAE;AAFR,GADoB;AAK/BC,EAAAA,IAAI,EAAE;AACJJ,IAAAA,IAAI,EAAE,CADF;AAEJgB,IAAAA,YAAY,EAAE,EAFV;AAGJC,IAAAA,WAAW,EAAE,CAHT;AAIJd,IAAAA,eAAe,EAAE,aAJb;AAKJe,IAAAA,WAAW,EAAE,aALT;AAMJC,IAAAA,cAAc,EAAE,QANZ;AAOJjB,IAAAA,YAAY,EAAE;AAPV,GALyB;AAc/BkB,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJnB,IAAAA,eAAe,EAAE;AAHb,GAdyB;AAmB/BO,EAAAA,KAAK,EAAE;AACLM,IAAAA,YAAY,EAAE,EADT;AAELO,IAAAA,KAAK,EAAE,MAFF;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAnBwB;AAwB/B5C,EAAAA,KAAK,EAAE;AACL6C,IAAAA,SAAS,EAAE,IADN;AAELJ,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,QAAQ,EAAE;AAHL,GAxBwB;AA6B/Bb,EAAAA,aAAa,EAAE;AACbY,IAAAA,SAAS,EAAE,QADE;AAEbnB,IAAAA,YAAY,EAAE;AAFD;AA7BgB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Dimensions,\r\n  Image,\r\n  Animated,\r\n  PanResponder,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport firebase from \"firebase\";\r\nimport {\r\n  Layout,\r\n  Button,\r\n  Text,\r\n  TopNav,\r\n  Section,\r\n  SectionContent,\r\n  useTheme,\r\n  themeColor,\r\n} from \"react-native-rapi-ui\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport Swiper from \"react-native-deck-swiper\";\r\nimport { discoveryFilms } from \"../API/index\";\r\nimport { pushFilmsOnFirestore } from \"../screens/utils/pushFilmsFirestore\";\r\n\r\nexport default function ({ navigation }) {\r\n  let idCard;\r\n  let posterPath;\r\n  let title;\r\n  const { isDarkmode, setTheme } = useTheme();\r\n  const [movieList, setMovieList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getDataMovie();\r\n  }, []);\r\n\r\n  const getDataMovie = async () => {\r\n    const result = await discoveryFilms();\r\n    setMovieList(result.results);\r\n  };\r\n\r\n  const setLoading = (isLoad) => {\r\n    if (!isLoad) {\r\n      return <Text>Loading</Text>;\r\n    }\r\n  };\r\n\r\n  const onSwipeRight = async (cardID, posterURL, movieTitle) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    await pushFilmsOnFirestore(\r\n      currentUser.uid,\r\n      true,\r\n      cardID,\r\n      posterURL,\r\n      movieTitle\r\n    );\r\n  };\r\n\r\n  const onSwipeLeft = async (cardID, posterURL, movieTitle) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    await pushFilmsOnFirestore(\r\n      currentUser.uid,\r\n      false,\r\n      cardID,\r\n      posterURL,\r\n      movieTitle\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Text fontWeight=\"bold\" style={styles.title}>\r\n        Créer votre propre collection\r\n      </Text>\r\n      <View style={styles.container}>\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            alignItems: \"center\",\r\n            marginBottom: 60,\r\n            backgroundColor: \"transparent\",\r\n          }}\r\n        >\r\n          <Swiper\r\n            cards={movieList}\r\n            renderCard={(card) => {\r\n              if (!card) {\r\n                return <View style={styles.loading}>{setLoading(true)}</View>;\r\n              } else {\r\n                idCard = card.id;\r\n                posterPath = card.poster_path;\r\n                title = card.original_title;\r\n                return (\r\n                  <View style={styles.card}>\r\n                    <Text style={styles.originalTtile}>\r\n                      {card.original_title}\r\n                    </Text>\r\n                    <Image\r\n                      style={styles.image}\r\n                      source={{\r\n                        uri:\r\n                          \"https://image.tmdb.org/t/p/w500\" + card.poster_path,\r\n                      }}\r\n                    />\r\n                  </View>\r\n                );\r\n              }\r\n            }}\r\n            onSwiped={(movieList) => {\r\n              console.log(movieList);\r\n            }}\r\n            onSwipedAll={() => {\r\n              console.log(\"onSwipedAll\");\r\n            }}\r\n            onSwipedLeft={() => onSwipeLeft(idCard, posterPath, title)} // si on swipe à gauche on appelle la fonction et on donne l'id du film swiper\r\n            onSwipedRight={() => onSwipeRight(idCard, posterPath, title)} // idem à droite\r\n            cardIndex={0}\r\n            backgroundColor={\"transparent\"}\r\n            stackSize={3}\r\n          />\r\n        </View>\r\n      </View>\r\n    </Layout>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  card: {\r\n    flex: 1,\r\n    borderRadius: 20,\r\n    borderWidth: 2,\r\n    backgroundColor: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"50%\",\r\n  },\r\n  text: {\r\n    textAlign: \"center\",\r\n    fontSize: 50,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  image: {\r\n    borderRadius: 18,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  title: {\r\n    marginTop: \"5%\",\r\n    textAlign: \"center\",\r\n    fontSize: 20,\r\n  },\r\n  originalTtile: {\r\n    textAlign: \"center\",\r\n    marginBottom: \"1%\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}