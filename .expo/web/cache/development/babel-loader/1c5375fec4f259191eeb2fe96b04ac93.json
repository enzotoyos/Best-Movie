{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport Toast from 'react-native-toast-message';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport function AddUserFirestore(email, name, uid) {\n  var db;\n  return _regeneratorRuntime.async(function AddUserFirestore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            db = firebase.firestore();\n            db.collection(\"users\").doc(uid).set({\n              email: email,\n              Name: name,\n              CreatedAt: Date.now(),\n              Status: \"Active\",\n              ModifiedAt: Date.now(),\n              currentPage: 1\n            });\n            db.collection(\"liked_films\").doc(uid).set({\n              movie: []\n            });\n            db.collection(\"unliked_films\").doc(uid).set({\n              movie: []\n            });\n          } catch (err) {\n            console.log(err.message);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getLikedFilms(uid) {\n  return _regeneratorRuntime.async(function getLikedFilms$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var db = firebase.firestore();\n            var docRef = db.collection(\"liked_films\").doc(uid);\n            docRef.get().then(function (doc) {\n              if (doc.exists) {\n                resolve(doc.data());\n              } else {\n                console.log(\"No such document!\");\n              }\n            }).catch(function (error) {\n              console.log(\"Error getting document:\", error);\n              reject();\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var pushFilmsOnFirestore = function pushFilmsOnFirestore(userID, likedOrNo, movieID, posterURL, movieTitle) {\n  var db, docData, data, _data;\n\n  return _regeneratorRuntime.async(function pushFilmsOnFirestore$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          db = firebase.firestore();\n          docData = {\n            movieTitle: movieTitle,\n            movieID: movieID,\n            addedAt: Date.now(),\n            posterPath: posterURL\n          };\n\n          if (likedOrNo == true) {\n            data = db.collection(\"liked_films\").doc(userID);\n            data.update({\n              movie: firebase.firestore.FieldValue.arrayUnion(docData)\n            });\n          } else if (likedOrNo == false) {\n            _data = db.collection(\"unliked_films\").doc(userID);\n\n            _data.update({\n              movie: firebase.firestore.FieldValue.arrayUnion(docData)\n            });\n          }\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var SendEmailVerification = function SendEmailVerification() {\n  return _regeneratorRuntime.async(function SendEmailVerification$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(firebase.auth().currentUser.sendEmailVerification().then(function () {\n            Toast.show({\n              type: 'info',\n              text1: 'Email de vérification envoyé'\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createUserWithEmailAndPassword = function createUserWithEmailAndPassword(email, pseudo, password) {\n  return _regeneratorRuntime.async(function createUserWithEmailAndPassword$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n            var user = userCredential.user;\n            var userID = user.uid;\n            AddUserFirestore(email, pseudo, userID);\n\n            if (user.emailVerified == false) {\n              SendEmailVerification();\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            Toast.show({\n              type: 'error',\n              text1: 'Une erreur est survenue durant la création',\n              text2: error.message\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var sendPasswordResetEmail = function sendPasswordResetEmail(email) {\n  return _regeneratorRuntime.async(function sendPasswordResetEmail$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(firebase.auth().sendPasswordResetEmail(email).then(function () {\n            Toast.show({\n              type: 'success',\n              text1: 'Votre mot de passe à été réinitialisé',\n              text2: 'Vous allez recevoir voir un Email.'\n            });\n          }).catch(function (error) {\n            setLoading(false);\n            Toast.show({\n              type: 'error',\n              text1: \"Votre Email n'est pas enregistré\"\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var signInWithEmailAndPassword = function signInWithEmailAndPassword(email, password) {\n  return _regeneratorRuntime.async(function signInWithEmailAndPassword$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password).then(function (userCredential) {\n            var user = userCredential.user;\n            AsyncStorage.setItem(\"uid\", String(user.uid));\n\n            if (user.emailVerified == false) {\n              Toast.show({\n                type: 'info',\n                text1: 'Vous devez vérifier votre Email pour vous connecter'\n              });\n            } else {\n              Toast.show({\n                type: 'success',\n                text1: 'Vous êtes connecté'\n              });\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            Toast.show({\n              type: 'error',\n              text1: 'Adresse mail ou mot de passe incorrect',\n              text2: error.message\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var deleteMovie = function deleteMovie(index) {\n  var db, data;\n  return _regeneratorRuntime.async(function deleteMovie$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          db = firebase.firestore();\n          console.log();\n          data = db.collection(\"liked_films\").doc(\"userID\");\n          data.update({\n            movie: firebase.firestore.FieldValue.arrayRemove(index)\n          }).catch(function (error) {\n            console.error(\"Error removing document: \", error);\n          });\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["D:/Documents/Ynov/Mobile/Best-Movie/src/screens/utils/controllerFirestore.js"],"names":["firebase","Toast","AsyncStorage","AddUserFirestore","email","name","uid","db","firestore","collection","doc","set","Name","CreatedAt","Date","now","Status","ModifiedAt","currentPage","movie","err","console","log","message","getLikedFilms","Promise","resolve","reject","docRef","get","then","exists","data","catch","error","pushFilmsOnFirestore","userID","likedOrNo","movieID","posterURL","movieTitle","docData","addedAt","posterPath","update","FieldValue","arrayUnion","SendEmailVerification","auth","currentUser","sendEmailVerification","show","type","text1","createUserWithEmailAndPassword","pseudo","password","userCredential","user","emailVerified","errorCode","code","text2","sendPasswordResetEmail","setLoading","signInWithEmailAndPassword","setItem","String","deleteMovie","index","arrayRemove"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport Toast from 'react-native-toast-message';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport async function AddUserFirestore(email, name, uid) {\n  try {\n    const db = firebase.firestore();\n    db.collection(\"users\").doc(uid).set({\n      email: email,\n      Name: name,\n      CreatedAt: Date.now(),\n      Status: \"Active\",\n      ModifiedAt: Date.now(),\n      currentPage: 1\n    });\n    db.collection(\"liked_films\").doc(uid).set({ movie: [] });\n    db.collection(\"unliked_films\").doc(uid).set({ movie: [] });\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport async function getLikedFilms(uid) {\n  return new Promise((resolve, reject) => {\n    const db = firebase.firestore();\n    var docRef = db.collection(\"liked_films\").doc(uid);\n\n    docRef.get().then((doc) => {\n      if (doc.exists) {\n        resolve(doc.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch((error) => {\n      console.log(\"Error getting document:\", error);\n      reject();\n    });\n  });\n}\n\nexport const pushFilmsOnFirestore = async (\n  userID,\n  likedOrNo,\n  movieID,\n  posterURL,\n  movieTitle\n) => {\n  const db = firebase.firestore();\n  var docData = {\n    movieTitle: movieTitle,\n    movieID: movieID,\n    addedAt: Date.now(),\n    posterPath: posterURL,\n  };\n\n  if (likedOrNo == true) {\n    let data = db.collection(\"liked_films\").doc(userID);\n\n    data.update({ movie: firebase.firestore.FieldValue.arrayUnion(docData) });\n  } else if (likedOrNo == false) {\n    let data = db.collection(\"unliked_films\").doc(userID);\n\n    data.update({ movie: firebase.firestore.FieldValue.arrayUnion(docData) });\n  }\n};\n\nexport const SendEmailVerification = async () => {\n  await firebase.auth().currentUser.sendEmailVerification().then(() => {\n    Toast.show({\n      type: 'info',\n      text1: 'Email de vérification envoyé'\n    });\n  });\n}\n\nexport const createUserWithEmailAndPassword = async (email, pseudo, password) => {\n  await firebase.auth().createUserWithEmailAndPassword(email, password).then((userCredential) => {\n    const user = userCredential.user;\n    const userID = user.uid;\n    AddUserFirestore(email, pseudo, userID);\n    if (user.emailVerified == false) {\n      SendEmailVerification();\n    }\n  }).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    Toast.show({\n      type: 'error',\n      text1: 'Une erreur est survenue durant la création',\n      text2: error.message\n    });\n  });\n}\n\nexport const sendPasswordResetEmail = async (email) => {\n  await firebase.auth().sendPasswordResetEmail(email)\n    .then(function () {\n      Toast.show({\n        type: 'success',\n        text1: 'Votre mot de passe à été réinitialisé',\n        text2: 'Vous allez recevoir voir un Email.'\n      });\n    })\n    .catch(function (error) {\n      setLoading(false);\n      Toast.show({\n        type: 'error',\n        text1: \"Votre Email n'est pas enregistré\"\n      });\n    });\n}\n\nexport const signInWithEmailAndPassword = async (email, password) => {\n  await firebase.auth().signInWithEmailAndPassword(email, password).then((userCredential) => {\n    const user = userCredential.user;\n    AsyncStorage.setItem(\"uid\", String(user.uid));\n\n    if (user.emailVerified == false) {\n      Toast.show({\n        type: 'info',\n        text1: 'Vous devez vérifier votre Email pour vous connecter'\n      });\n    } else {\n      Toast.show({\n        type: 'success',\n        text1: 'Vous êtes connecté'\n      });\n    }\n  }).catch(function (error) {\n    var errorCode = error.code;\n    Toast.show({\n      type: 'error',\n      text1: 'Adresse mail ou mot de passe incorrect',\n      text2: error.message\n    });\n  });\n}\n\n\n\nexport const deleteMovie = async (index) => {\n  const db = firebase.firestore();\n  console.log();\n  let data = db.collection(\"liked_films\").doc(\"userID\");\n  data.update({ movie: firebase.firestore.FieldValue.arrayRemove(index) })\n    .catch(function (error) {\n      console.error(\"Error removing document: \", error);\n    });\n\n}"]},"metadata":{},"sourceType":"module"}