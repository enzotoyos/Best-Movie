{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/enzotoyos/Desktop/Best-Movie/src/screens/Home.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport firebase from \"firebase\";\nimport { Layout, Text, useTheme, TopNav, themeColor, Section, SectionContent } from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Swiper from \"react-native-deck-swiper\";\nimport { discoveryFilms } from \"../API/index\";\nimport { pushFilmsOnFirestore } from \"./utils/controllerFirestore\";\nimport { updateCurrentPage } from \"./utils/GetDataUser\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport default function (_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode,\n      setTheme = _useTheme.setTheme;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      movieList = _useState2[0],\n      setMovieList = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardIndex = _useState4[0],\n      setCardIndex = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rating = _useState6[0],\n      setRating = _useState6[1];\n\n  useEffect(function () {\n    getDataMovie();\n  }, []);\n\n  var getDataMovie = function getDataMovie() {\n    var currentPage, result;\n    return _regeneratorRuntime.async(function getDataMovie$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"currentPage\"));\n\n          case 2:\n            currentPage = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(discoveryFilms(currentPage));\n\n          case 5:\n            result = _context.sent;\n            setMovieList(result.results);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var refreshList = function refreshList() {\n    var currentPage, result;\n    return _regeneratorRuntime.async(function refreshList$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(updateCurrentPage());\n\n          case 2:\n            currentPage = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(discoveryFilms(currentPage));\n\n          case 5:\n            result = _context2.sent;\n            console.log('----------------------------------');\n            setCardIndex(0);\n            setMovieList(result.results);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setLoading = function setLoading(isLoad) {\n    if (!isLoad) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 14\n        }\n      }, \"Loading\");\n    }\n  };\n\n  var onSwipeRight = function onSwipeRight(cardIndex) {\n    var currentUser, movie;\n    return _regeneratorRuntime.async(function onSwipeRight$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            currentUser = firebase.auth().currentUser;\n            movie = movieList[cardIndex];\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(pushFilmsOnFirestore(currentUser.uid, true, movie.id, movie.poster_path, movie.title));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onSwipeLeft = function onSwipeLeft(cardIndex) {\n    var currentUser, movie;\n    return _regeneratorRuntime.async(function onSwipeLeft$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            currentUser = firebase.auth().currentUser;\n            movie = movieList[cardIndex];\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(pushFilmsOnFirestore(currentUser.uid, false, movie.id, movie.poster_path, movie.title));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(TopNav, {\n    rightContent: React.createElement(Ionicons, {\n      name: \"refresh-circle-outline\",\n      size: 30,\n      color: isDarkmode ? themeColor.white100 : themeColor.black,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }),\n    rightAction: function rightAction() {\n      return refreshList();\n    },\n    middleContent: \"Best-Movie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      marginBottom: 60,\n      backgroundColor: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, React.createElement(Swiper, {\n    cards: movieList,\n    renderCard: function renderCard(card) {\n      if (!card) {\n        return React.createElement(View, {\n          style: styles.loading,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 24\n          }\n        }, setLoading(true));\n      } else {\n        setRating(card.vote_average);\n        return React.createElement(View, {\n          style: styles.card,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 19\n          }\n        }, React.createElement(Section, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }, React.createElement(SectionContent, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 23\n          }\n        }, React.createElement(Text, {\n          style: styles.titleMovie,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }\n        }, card.original_title), React.createElement(Image, {\n          style: styles.image,\n          source: {\n            uri: \"https://image.tmdb.org/t/p/w500\" + card.poster_path\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }\n        }))));\n      }\n    },\n    onSwiped: function onSwiped(cardIndex) {\n      console.log('onSwiped', cardIndex);\n    },\n    onSwipedAll: function onSwipedAll() {\n      console.log(\"onSwipedAll\");\n      refreshList();\n    },\n    onSwipedLeft: function onSwipedLeft(cardIndex) {\n      return onSwipeLeft(cardIndex);\n    },\n    onSwipedRight: function onSwipedRight(cardIndex) {\n      onSwipeRight(cardIndex);\n    },\n    cardIndex: cardIndex,\n    backgroundColor: \"transparent\",\n    stackSize: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"transparent\"\n  },\n  card: {\n    flex: 1,\n    borderRadius: 20,\n    borderWidth: 2,\n    borderColor: \"transparent\",\n    justifyContent: \"center\",\n    marginBottom: '50%'\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 50,\n    backgroundColor: \"transparent\"\n  },\n  image: {\n    borderRadius: 18,\n    width: \"100%\",\n    height: \"100%\"\n  },\n  titleMovie: {\n    textAlign: \"center\",\n    paddingBottom: 10\n  }\n});","map":{"version":3,"sources":["/Users/enzotoyos/Desktop/Best-Movie/src/screens/Home.js"],"names":["React","useEffect","useState","firebase","Layout","Text","useTheme","TopNav","themeColor","Section","SectionContent","Ionicons","Swiper","discoveryFilms","pushFilmsOnFirestore","updateCurrentPage","AsyncStorage","navigation","isDarkmode","setTheme","movieList","setMovieList","cardIndex","setCardIndex","rating","setRating","getDataMovie","getItem","currentPage","result","results","refreshList","console","log","setLoading","isLoad","onSwipeRight","currentUser","auth","movie","uid","id","poster_path","title","onSwipeLeft","white100","black","styles","container","flex","alignItems","marginBottom","backgroundColor","card","loading","vote_average","titleMovie","original_title","image","uri","StyleSheet","create","borderRadius","borderWidth","borderColor","justifyContent","text","textAlign","fontSize","width","height","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View, Image } from \"react-native\";\nimport firebase from \"firebase\";\nimport {\n  Layout,\n  Text,\n  useTheme,\n  TopNav,\n  themeColor,\n  Section,\n  SectionContent\n} from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Swiper from \"react-native-deck-swiper\";\nimport { discoveryFilms } from \"../API/index\";\nimport { pushFilmsOnFirestore } from \"./utils/controllerFirestore\";\nimport { updateCurrentPage } from \"./utils/GetDataUser\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport default function ({ navigation }) {\n  const { isDarkmode, setTheme } = useTheme();\n  const [movieList, setMovieList] = useState([]);\n  const [cardIndex, setCardIndex] = useState(0);\n  const [rating, setRating] = useState(0);\n\n  useEffect(() => {\n    getDataMovie();\n  }, []);\n\n  const getDataMovie = async () => {\n    const currentPage = await AsyncStorage.getItem(\"currentPage\");\n    const result = await discoveryFilms(currentPage);\n    setMovieList(result.results);\n  };\n\n  const refreshList = async () => {\n    let currentPage = await updateCurrentPage();\n    const result = await discoveryFilms(currentPage);\n    console.log('----------------------------------');\n    setCardIndex(0);\n    setMovieList(result.results);\n  };\n\n  const setLoading = (isLoad) => {\n    if (!isLoad) {\n      return <Text>Loading</Text>;\n    }\n  };\n\n  const onSwipeRight = async (cardIndex) => {\n    const currentUser = firebase.auth().currentUser;\n    const movie = movieList[cardIndex];\n    await pushFilmsOnFirestore(\n      currentUser.uid,\n      true,\n      movie.id,\n      movie.poster_path,\n      movie.title\n    );\n  };\n\n  const onSwipeLeft = async (cardIndex) => {\n    const currentUser = firebase.auth().currentUser;\n    const movie = movieList[cardIndex];\n    await pushFilmsOnFirestore(\n      currentUser.uid,\n      false,\n      movie.id,\n      movie.poster_path,\n      movie.title\n    );\n  };\n\n  return (\n    <Layout>\n      <TopNav\n        rightContent={\n          <Ionicons\n            name=\"refresh-circle-outline\"\n            size={30}\n            color={isDarkmode ? themeColor.white100 : themeColor.black}\n          />\n        }\n        rightAction={() => refreshList()}\n        middleContent=\"Best-Movie\"\n      />\n      <View style={styles.container}>\n        <View\n          style={{\n            flex: 1,\n            alignItems: \"center\",\n            marginBottom: 60,\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <Swiper\n            cards={movieList}\n            renderCard={(card) => {\n              if (!card) {\n                return <View style={styles.loading}>{setLoading(true)}</View>;\n              } else {\n                setRating(card.vote_average);\n                return (\n                  <View style={styles.card}>\n                    <Section>\n                      <SectionContent>\n                        <Text style={styles.titleMovie}>\n                          {card.original_title}\n                        </Text>\n                        <Image\n                          style={styles.image}\n                          source={{\n                            uri:\n                              \"https://image.tmdb.org/t/p/w500\" + card.poster_path,\n                          }}\n                        />\n                      </SectionContent>\n                    </Section>\n                  </View>\n                );\n              }\n            }}\n            onSwiped={(cardIndex) => {\n              console.log('onSwiped', cardIndex);\n            }}\n            onSwipedAll={() => {\n              console.log(\"onSwipedAll\");\n              refreshList();\n            }}\n            onSwipedLeft={(cardIndex) => onSwipeLeft(cardIndex)}\n            onSwipedRight={(cardIndex) => {\n              onSwipeRight(cardIndex);\n            }} // idem à droite\n            cardIndex={cardIndex}\n            backgroundColor={\"transparent\"}\n            stackSize={3}\n          />\n        </View>\n      </View>\n    </Layout>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"transparent\",\n  },\n  card: {\n    flex: 1,\n    borderRadius: 20,\n    borderWidth: 2,\n    borderColor: \"transparent\",\n    justifyContent: \"center\",\n    marginBottom: '50%',\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 50,\n    backgroundColor: \"transparent\",\n  },\n  image: {\n    borderRadius: 18,\n    width: \"100%\",\n    height: \"100%\",\n  },\n  titleMovie: {\n    textAlign: \"center\",\n    paddingBottom: 10\n  },\n});\n"]},"metadata":{},"sourceType":"module"}