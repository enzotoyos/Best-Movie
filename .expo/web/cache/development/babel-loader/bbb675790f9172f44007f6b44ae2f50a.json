{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport { useAnimatedGestureHandler, withSpring, runOnJS } from 'react-native-reanimated';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar SwipePan = function SwipePan(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      onSnap = _ref.onSnap,\n      _onStart = _ref.onStart,\n      _onEnd = _ref.onEnd,\n      originY = _ref.originY,\n      children = _ref.children;\n  var gestureHandler = useAnimatedGestureHandler({\n    onStart: function onStart(event, ctx) {\n      ctx.startX = x.value;\n      ctx.startY = y.value;\n      originY.value = event.y;\n      runOnJS(_onStart)();\n    },\n    onActive: function onActive(event, ctx) {\n      x.value = ctx.startX + event.translationX;\n      y.value = ctx.startY + event.translationY;\n    },\n    onEnd: function onEnd(event, ctx) {\n      runOnJS(_onEnd)();\n      var thresh = width * 0.4;\n      var diff = ctx.startX + event.translationX;\n\n      if (diff > thresh) {\n        runOnJS(onSnap)(true);\n      } else if (diff < -1 * thresh) {\n        runOnJS(onSnap)(false);\n      } else {\n        x.value = withSpring(0);\n        y.value = withSpring(0);\n      }\n    }\n  });\n  return React.createElement(PanGestureHandler, {\n    onGestureEvent: gestureHandler\n  }, children);\n};\n\nexport default SwipePan;","map":{"version":3,"sources":["index.tsx"],"names":["width","Dimensions","SwipePan","children","gestureHandler","useAnimatedGestureHandler","onStart","ctx","x","y","originY","event","runOnJS","onActive","onEnd","thresh","diff","withSpring"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,SAAA,iBAAA,QAAA,8BAAA;AACA,SAAA,yBAAA,EAAA,UAAA,EAAA,OAAA,QAAA,yBAAA;;AAyBA,sBAAkBC,UAAU,CAAVA,GAAAA,CAAlB,QAAkBA,CAAlB;AAAA,IAAQD,KAAR,mBAAQA,KAAR;;AAEA,IAAME,QAAQ,GAAG,SAAXA,QAAW,OAQJ;AAAA,MARK,CAQL,QARK,CAQL;AAAA,MARK,CAQL,QARK,CAQL;AAAA,MARK,MAQL,QARK,MAQL;AAAA,MARK,QAQL,QARK,OAQL;AAAA,MARK,MAQL,QARK,KAQL;AAAA,MARK,OAQL,QARK,OAQL;AAAA,MADXC,QACW,QADXA,QACW;AACX,MAAMC,cAAc,GAAGC,yBAAyB,CAAC;AAC/CC,IAAAA,OAAO,EAAE,iBAAA,KAAA,EAAA,GAAA,EAAmC;AAC1CC,MAAAA,GAAG,CAAHA,MAAAA,GAAaC,CAAC,CAAdD,KAAAA;AACAA,MAAAA,GAAG,CAAHA,MAAAA,GAAaE,CAAC,CAAdF,KAAAA;AAEAG,MAAAA,OAAO,CAAPA,KAAAA,GAAgBC,KAAK,CAArBD,CAAAA;AACAE,MAAAA,OAAO,CAAPA,QAAO,CAAPA;AAN6C,KAAA;AAQ/CC,IAAAA,QAAQ,EAAE,kBAAA,KAAA,EAAA,GAAA,EAAgB;AACxBL,MAAAA,CAAC,CAADA,KAAAA,GAAUD,GAAG,CAAHA,MAAAA,GAAaI,KAAK,CAA5BH,YAAAA;AACAC,MAAAA,CAAC,CAADA,KAAAA,GAAUF,GAAG,CAAHA,MAAAA,GAAaI,KAAK,CAA5BF,YAAAA;AAV6C,KAAA;AAY/CK,IAAAA,KAAK,EAAE,eAAA,KAAA,EAAA,GAAA,EAAgB;AACrBF,MAAAA,OAAO,CAAPA,MAAO,CAAPA;AAEA,UAAMG,MAAM,GAAGf,KAAK,GAApB,GAAA;AACA,UAAMgB,IAAI,GAAGT,GAAG,CAAHA,MAAAA,GAAaI,KAAK,CAA/B,YAAA;;AAEA,UAAIK,IAAI,GAAR,MAAA,EAAmB;AACjBJ,QAAAA,OAAO,CAAPA,MAAO,CAAPA,CAAAA,IAAAA;AADF,OAAA,MAEO,IAAII,IAAI,GAAG,CAAA,CAAA,GAAX,MAAA,EAAwB;AAC7BJ,QAAAA,OAAO,CAAPA,MAAO,CAAPA,CAAAA,KAAAA;AADK,OAAA,MAEA;AACLJ,QAAAA,CAAC,CAADA,KAAAA,GAAUS,UAAU,CAApBT,CAAoB,CAApBA;AACAC,QAAAA,CAAC,CAADA,KAAAA,GAAUQ,UAAU,CAApBR,CAAoB,CAApBA;AACD;AACF;AA1B8C,GAAD,CAAhD;AA6BA,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AAAmB,IAAA,cAAc,EAAEL;AAAnC,GAAA,EADF,QACE,CADF;AAtCF,CAAA;;AA6CA,eAAA,QAAA","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  useAnimatedGestureHandler,\n  withSpring,\n  runOnJS,\n} from 'react-native-reanimated';\n\ninterface Value {\n  value: number;\n}\n\ninterface Props {\n  x: Value;\n  y: Value;\n  originY: Value;\n  onSnap: (swipedRight: boolean) => void;\n  onStart: () => void;\n  onEnd: () => void;\n  children: React.ReactNode;\n}\n\ntype AnimatedGHContext = {\n  startX: number;\n  startY: number;\n};\n\nconst { width } = Dimensions.get('window');\n\nconst SwipePan = ({\n  x,\n  y,\n  onSnap,\n  onStart,\n  onEnd,\n  originY,\n  children,\n}: Props) => {\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (event, ctx: AnimatedGHContext) => {\n      ctx.startX = x.value;\n      ctx.startY = y.value;\n\n      originY.value = event.y;\n      runOnJS(onStart)();\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n      y.value = ctx.startY + event.translationY;\n    },\n    onEnd: (event, ctx) => {\n      runOnJS(onEnd)();\n\n      const thresh = width * 0.4;\n      const diff = ctx.startX + event.translationX;\n\n      if (diff > thresh) {\n        runOnJS(onSnap)(true);\n      } else if (diff < -1 * thresh) {\n        runOnJS(onSnap)(false);\n      } else {\n        x.value = withSpring(0);\n        y.value = withSpring(0);\n      }\n    },\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      {children}\n    </PanGestureHandler>\n  );\n};\n\nexport default SwipePan;\n"]},"metadata":{},"sourceType":"module"}