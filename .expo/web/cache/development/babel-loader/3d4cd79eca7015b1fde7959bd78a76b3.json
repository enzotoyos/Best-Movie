{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nexport function AddUserFirestore(email, name, uid) {\n  var db;\n  return _regeneratorRuntime.async(function AddUserFirestore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            db = firebase.firestore();\n            db.collection(\"users\").doc(user.uid).set({\n              email: email,\n              Name: name,\n              CreatedAt: Date.now(),\n              Status: \"Active\",\n              ModifiedAt: Date.now()\n            });\n            db.collection(\"liked_films\").doc(uid).set({\n              movie: []\n            });\n            db.collection(\"unliked_films\").doc(uid).set({\n              movie: []\n            });\n          } catch (err) {\n            console.log(err.message);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getLikedFilms(uid) {\n  return _regeneratorRuntime.async(function getLikedFilms$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var db = firebase.firestore();\n            console.log(\"uid\", uid);\n            var docRef = db.collection(\"liked_films\").doc(uid);\n            docRef.get().then(function (doc) {\n              if (doc.exists) {\n                resolve(doc.data());\n              } else {\n                console.log(\"No such document!\");\n              }\n            }).catch(function (error) {\n              console.log(\"Error getting document:\", error);\n              reject();\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Utilisateurs/Armand/Documents/Ynov/WebMobilePWA/Best-Movie/src/screens/auth/AddUserFirestore.js"],"names":["firebase","AddUserFirestore","email","name","uid","db","firestore","collection","doc","user","set","Name","CreatedAt","Date","now","Status","ModifiedAt","movie","err","console","log","message","getLikedFilms","Promise","resolve","reject","docRef","get","then","exists","data","catch","error"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAEA,OAAO,SAAeC,gBAAf,CAAgCC,KAAhC,EAAuCC,IAAvC,EAA6CC,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,cAAI;AACIC,YAAAA,EADJ,GACSL,QAAQ,CAACM,SAAT,EADT;AAEFD,YAAAA,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BC,IAAI,CAACL,GAAhC,EAAqCM,GAArC,CAAyC;AACvCR,cAAAA,KAAK,EAAEA,KADgC;AAEvCS,cAAAA,IAAI,EAAER,IAFiC;AAGvCS,cAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAH4B;AAIvCC,cAAAA,MAAM,EAAE,QAJ+B;AAKvCC,cAAAA,UAAU,EAAEH,IAAI,CAACC,GAAL;AAL2B,aAAzC;AAOAT,YAAAA,EAAE,CAACE,UAAH,CAAc,aAAd,EAA6BC,GAA7B,CAAiCJ,GAAjC,EAAsCM,GAAtC,CAA0C;AAAEO,cAAAA,KAAK,EAAE;AAAT,aAA1C;AACAZ,YAAAA,EAAE,CAACE,UAAH,CAAc,eAAd,EAA+BC,GAA/B,CAAmCJ,GAAnC,EAAwCM,GAAxC,CAA4C;AAAEO,cAAAA,KAAK,EAAE;AAAT,aAA5C;AACD,WAXD,CAWE,OAAOC,GAAP,EAAY;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACD;;AAdI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAeC,aAAf,CAA6BlB,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,IAAImB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,gBAAMpB,EAAE,GAAGL,QAAQ,CAACM,SAAT,EAAX;AACAa,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBhB,GAAnB;AACA,gBAAIsB,MAAM,GAAGrB,EAAE,CAACE,UAAH,CAAc,aAAd,EAA6BC,GAA7B,CAAiCJ,GAAjC,CAAb;AAEAsB,YAAAA,MAAM,CACHC,GADH,GAEGC,IAFH,CAEQ,UAACpB,GAAD,EAAS;AACb,kBAAIA,GAAG,CAACqB,MAAR,EAAgB;AACdL,gBAAAA,OAAO,CAAChB,GAAG,CAACsB,IAAJ,EAAD,CAAP;AACD,eAFD,MAEO;AACLX,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,aARH,EASGW,KATH,CASS,UAACC,KAAD,EAAW;AAChBb,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCY,KAAvC;AACAP,cAAAA,MAAM;AACP,aAZH;AAaD,WAlBM,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\n\r\nexport async function AddUserFirestore(email, name, uid) {\r\n  try {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\").doc(user.uid).set({\r\n      email: email,\r\n      Name: name,\r\n      CreatedAt: Date.now(),\r\n      Status: \"Active\",\r\n      ModifiedAt: Date.now(),\r\n    });\r\n    db.collection(\"liked_films\").doc(uid).set({ movie: [] });\r\n    db.collection(\"unliked_films\").doc(uid).set({ movie: [] });\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n}\r\n\r\nexport async function getLikedFilms(uid) {\r\n  return new Promise((resolve, reject) => {\r\n    const db = firebase.firestore();\r\n    console.log(\"uid\", uid);\r\n    var docRef = db.collection(\"liked_films\").doc(uid);\r\n\r\n    docRef\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          resolve(doc.data());\r\n        } else {\r\n          console.log(\"No such document!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error getting document:\", error);\r\n        reject();\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}